
var app = angular.module("myApp", ["ngRoute", "angularUtils.directives.dirPagination", "ngSanitize", "ui.bootstrap"]);
// register the interceptor as a service, intercepts ALL angular ajax http calls

app.run(function ($rootScope,$location) {
    $rootScope.shopurl = '/#/';
    var loc = $location.absUrl().split($rootScope.shopurl);
    $rootScope.loc = loc['0'].replace(/^\/+|\/+$/g, '');

    $rootScope.local_api_url = $rootScope.loc+"/databaseFiles";
    local_api_url= $rootScope.local_api_url;
    $rootScope.afterLogin = '#/pos';
    //console.log($rootScope);
    //console.log($location);

    //console.log(localStorage.getItem("merchant"));


    if(localStorage.getItem("merchant")) {
        if(localStorage.getItem("rootScopeUser")){

            $rootScope.user = localStorage.getItem("rootScopeUser");
            setSession($rootScope.user);
            var obj = JSON.parse(localStorage.getItem("rootScopeUser"));
            $rootScope.user_id = obj.result[0].id;
			//$rootScope.user_name = obj.merchant.res.name;

        }
    }else{
        if(localStorage.getItem("rootScopeUser")) {
            delete $rootScope.user
            localStorage.removeItem("rootScopeUser");
        }

        //location = '#/logout';
    }


    $rootScope.isMobile = false; //initiate as false
    // device detection
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
        $rootScope.isMobile = true;
    }

    if ($rootScope.isMobile) {
        $rootScope.afterLogin = '#/pos';
    } else {
        $rootScope.afterLogin = '#/pos';
    }


});

app.filter('trustAsHtml', function ($sce) {
    return function (html) {
        return $sce.trustAsHtml(html);
    };
});

app.config(function ($routeProvider) {
    $routeProvider
        .when("/login", {
            templateUrl: "templates/login.php",
            controller: 'loginController'

        })
        .when("/settings", {
            templateUrl: "templates/settings.php",
            controller: 'settingsController'
        })
        .when("/checkout", {
            templateUrl: "templates/checkout.php",
            controller: "checkoutController"
        })
        .when("/order", {
            templateUrl: "templates/order.php",
            controller: "myOrdersController"
        })
        .when("/home", {
            templateUrl: "templates/home.php",
            controller: "shopController"
        })
        .when("/pos", {
            templateUrl: "templates/pos.php",
            controller: "shopController"
        })
        .when("/view/:order_id", {
            templateUrl: "templates/view.php",
            controller: "viewController",
        })
        .when("/logout", {
            templateUrl: "templates/logout.php",
            controller: 'logoutController'
        })
        .when("/transections", {
            templateUrl: "templates/transections.php",
            controller: "transectionsController"
        })
        .otherwise({redirectTo: '/pos'});


});

app.controller("transectionsController", function ($rootScope, $scope, $location, $http, $filter, $timeout,$route, $routeParams) {
    var vm = this;
    vm.list = []; //declare an empty array
    vm.pageno = 1; // initialize page no to 1
    vm.total_count = 0;
    vm.itemsPerPage = 10; //this could be a dynamic value from a drop down
    vm.getData = function(pageno){ // This would fetch the data on page change.
        //In practice this should be in a factory.
        //alert($rootScope.local_api_url+"/transections/getList/"+vm.itemsPerPage+"/"+vm.pageno)
        vm.list = [];
        $http.get($rootScope.local_api_url+"/transections/getList/"+vm.itemsPerPage+"/"+pageno).success(function(response){
            //ajax request to fetch data into vm.data
            console.log(response);
            vm.list = response.data;  // data to be displayed on current page.
            vm.total_count = response.total_count; // total data count.
        });
    };
    vm.getData(vm.pageno); // Call the function to fetch initial data on page load.
    $scope.customer = JSON.parse($rootScope.user);
    console.log("-------------***----------------");
    console.log($scope.customer.result[0].name);

    $scope.row_delete = function(id){
        $http.get($rootScope.local_api_url+"/transections/rowDelete/"+id).success(function(response){
            //ajax request to fetch data into vm.data
            console.log(response);
            $route.reload();
        });
    }

});

app.controller("viewController", function ($rootScope, $scope, $location, $http, $filter, $timeout,$uibModal, $sce,$routeParams) {
    if (!$rootScope.user) {
        location = '#/login';
        return;
    }

    $scope.balance_amount = 0;
    $scope.change_amount = 0;
    $scope.total_tax = 0;
    $scope.total_discount = 0;
    $scope.product_tax = 0;
    $scope.product_discount = 0;

    if($routeParams.order_id){
        $http({
            method: 'POST',
            url: $rootScope.local_api_url + '/api/catlog/?action=getOfflineOrder',
            data: '&order_id=' + $routeParams.order_id , //forms user object
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        })
            .error(function (error) {
                alert('ajax request error');
                console.log(error);
            })
            .success(function (data) {
                $scope.order =  data;

                if(data.row.order_json_data.products){
                    angular.forEach(data.row.order_json_data.products, function (obj, index) {
                        $scope.product_tax += parseFloat(obj.item_tax);
                        $scope.product_discount += parseFloat(obj.item_discount);
                    });
                }

                $scope.total_tax = parseFloat($scope.product_tax)+parseFloat(data.row.order_json_data.order_tax);
                $scope.total_discount = parseFloat($scope.product_discount)+parseFloat(data.row.order_json_data.order_discount);


                if(data.row.order_json_data.amount_paid){
                    if(data.row.order_json_data.amount_paid>=data.row.order_json_data.order_total){
                        $scope.balance_amount = 0;
                        $scope.change_amount = parseFloat(data.row.order_json_data.amount_paid) - parseFloat(data.row.order_json_data.order_total);
                    }else{
                        $scope.change_amount = 0;
                        $scope.balance_amount = parseFloat(data.row.order_json_data.order_total) - parseFloat(data.row.order_json_data.amount_paid);
                    }
                }else{
                    $scope.balance_amount = 0;
                    $scope.change_amount = 0;
                }

                if(data.row.online_order_id == 0){
                    syncOrder();
                }

                $scope.generalDetails = data.row.order_json_data.generalDetails[0];
                console.log(data.row.order_json_data );
            });
    }


    $rootScope.inWords = function  (num) {
        var a = ['','one ','two ','three ','four ', 'five ','six ','seven ','eight ','nine ','ten ','eleven ','twelve ','thirteen ','fourteen ','fifteen ','sixteen ','seventeen ','eighteen ','nineteen '];
        var b = ['', '', 'twenty','thirty','forty','fifty', 'sixty','seventy','eighty','ninety'];

        if ((num = num.toString()).length > 9) return 'overflow';
        n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
        if (!n) return; var str = '';
        str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'crore ' : '';
        str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'lakh ' : '';
        str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'thousand ' : '';
        str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'hundred ' : '';
        str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
        return str;
    }
    $scope.printToCart = function(printSectionId) {
        var innerContents = document.getElementById(printSectionId).innerHTML;
        var popupWinindow = window.open('', '_blank', 'width=800,height=700,scrollbars=no,menubar=no,toolbar=no,location=no,status=no,titlebar=no');
        popupWinindow.document.open();
        popupWinindow.document.write('<html><head><link rel="stylesheet" media="all" type="text/css" href="css/bootstrap.min.css" /><link rel="stylesheet" media="all" type="text/css" href="css/bootstrap.min.3.3.7.css" /><link rel="stylesheet" media="all" type="text/css" href="css/font-awesome.min.css" /><link rel="stylesheet" media="all" type="text/css" href="css/style.css" /><link rel="stylesheet" media="all" type="text/css" href="css/print.css" /></head><body onload="window.print()">' + innerContents + '</html>');
        popupWinindow.document.close();
    }

    //$rootScope.submit_type = 'Submit & print';


    $scope.$on('$viewContentLoaded', function() {
        if($rootScope.submit_type == 'Submit & print') {
            $timeout(function () {
                $("#printToCartId").trigger('click');
            }, 5000);
            $rootScope.submit_type='';
        }


    });

});
app.controller("shopController", function ($rootScope, $scope, $location, $http, $filter, $timeout,$uibModal, $sce,dbService) {

    if (!$rootScope.user) {
        location = '#/login';
        return;
    }
    var AuthToken = getAuthToken($rootScope.user);
    $scope.sync_biller=function(){
        dbService.syncGeneralDetails(pos_url);
    };
    $scope.sync_images = function () {
        dbService.syncProductImages(pos_url);
    }

    function getTax() {
        $http({
            method: 'POST',
            url: $rootScope.local_api_url + '/eshop?action=getTaxMethods',
            data: '&user_id=' + $rootScope.user_id + '&auth_token=' + AuthToken, //forms user object
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        })
            .error(function (error) {
                alert('Error Past methos in getOrderTaxMethod.');
                console.log(error);
            })
            .success(function (data) {
                $rootScope.allTaxMethods =  data;
            });
    }
// Any function returning a promise object can be used to load values asynchronously
    $scope.getTypeHeadProduct = function (val) {

        //return $http.get('//maps.googleapis.com/maps/api/geocode/json', {
        return $http.get( $rootScope.local_api_url + '/api/catlog?action=allProducts', {
            params: {
                keyword: val,
                limit: 10,
                sensor: false
            }
        }).then(function (response) {
            var data = [response.data[0]];
            var data2 = [];
            //console.log([response.data[0]]);
            angular.forEach(response.data, function (obj, index) {
                if(obj.name){
                data2.push(obj);
                }
            });


            return data2;
            /*return data.map(function (item) {
                return item;
            });*/
        });
    };


    $scope.category_loading = true;
    $scope.product_loading = true;
    $scope.productFilter = {};
    $scope.defaultCategory = 0;
    $scope.productPerPage = 15;
    $scope.pageNo = 1;

    //$rootScope.states.activeItem='item1';

    //Product & category contreller
    loc = $location.absUrl().split($rootScope.shopurl);
    $rootScope.loc = loc['0'];


    $scope.search = function (keyword) {
        $scope.searchCatKeyword = keyword;
        getCategory();
    }
    //Subcategory filter
    $scope.subCat = function (categories, pId) {
        str = '';
        angular.forEach(categories, function (value, key) {
            if (value.parent_id == pId) {
                str += '<a type="button" class="category-link" ng-click="filterBySubCat(\'' + value.id + '\');" data-toggle="collapse" data-target="#pId_' + value.id + '">' + value.name + '</a><div id="pId_' + value.id + '" class="collapse sub-menu"></div>';
            }
        });
        //jQuery('#pId_' + pId).html(str);
    }

    function getCategory() {
        var searchCat = '';
        if ($scope.searchCatKeyword) {
            searchCat = '&keyword=' + $scope.searchCatKeyword;
        }

        $http.get($rootScope.local_api_url + '/api/catlog?action=allCategories' + searchCat).success(function (data) {
            $scope.parentCategories = {};
            $scope.subCategories = [];

            if (data.status == 'SUCCESS') {

                if (data.count > 0) {
                    $scope.defaultCategory = data.default_category;
                    var i = 0;

                    var parent = 0;

                    angular.forEach(data, function (value, key) {
                        if (!isNaN(key)) {
                            parent = value.parent_id;
                            if (value.parent_id == 0 && value.product_count > 0) {
                                $scope.parentCategories[i] = value;
                                i++;
                            }

                            if (value.parent_id > 0) {
                                $scope.subCategories.push(value);
                            }
                        }
                    });

                    $scope.category_loading = false;
                    //$scope.productFilter.category = $scope.defaultCategory;
                    $scope.productFilter.subCategory = '';
                    $scope.productFilter.keyword = '';
                }

            }
        });

        delete $scope.searchCatKeyword;
    }


    $scope.showCategoryProducts = function (category, subCategory) {

        $scope.productFilter.category = (category > 0) ? category : '';

        if (!isNaN(subCategory) && subCategory > 0) {
            $scope.productFilter.subCategory = subCategory;
        } else {
            $scope.productFilter.subCategory = '';
        }
        $("#sub-div").removeClass("main");
        $scope.productFilter.keyword = '';
        getProducts($scope.pageNo);
    }

    $scope.searchProducts = function () {
        var keyword = $scope.searchText;

        $scope.productFilter.category = '';
        $scope.productFilter.subCategory = '';
        $scope.productFilter.keyword = keyword;
        getProducts($scope.pageNo);
    }

    $scope.requestPageNo = function (pageNo) {

        getProducts(pageNo);
    }

    getCategory();

    $timeout(function () {
        getProducts($scope.pageNo);
    }, 2000);

    function getProducts(pageNo) {
        pageNo = (pageNo) ? pageNo : 1;
        $scope.product_loading = true;
        $scope.showPaging = false;
        var user = JSON.parse($rootScope.user);
        //console.log(user);
        var postData = "&limit=" + $scope.productPerPage;
        postData = postData + '&offset=' + ((pageNo - 1) * $scope.productPerPage) + "&company_id=" + user.result[0].id;

        if (!isNaN($scope.productFilter.category)) {
            //alert($scope.productFilter.category);
            postData = postData + '&category_id=' + $scope.productFilter.category;
        }

        if (!isNaN($scope.productFilter.subCategory)) {
            postData = postData + '&subcategory_id=' + $scope.productFilter.subCategory;
        }

        if ($scope.productFilter.keyword) {
            postData = postData + '&keyword=' + $scope.productFilter.keyword;
        }


        $http.get($rootScope.local_api_url + '/api/catlog?action=allProducts' + postData).success(function (data) {
            var arr = [];
            var maxPageNo = 0;
            $scope.displayCurrentPage = '';
            $scope.displayNextLink = false;
            $scope.displayPriviousLink = false;

            if (data.status == 'SUCCESS') {

                if (data.count > 0) {
                    angular.forEach(data, function (value, key) {
                        if (!isNaN(key)) {
                            //value.price = Math.round(value.price, -1);
                            value.price = value.price;
                            arr.push(value);
                        }
                    });

                    if (data.count < data.total_product_count) {

                        maxPageNo = Math.ceil(data.total_product_count / $scope.productPerPage);

                        $scope.displayCurrentPage = 'Page(' + pageNo + '/' + maxPageNo + ')';

                        if (pageNo < maxPageNo) {
                            $scope.displayNextLink = true;
                            $scope.nextPage = pageNo + 1;
                        } else {
                            $scope.displayNextLink = false;
                        }

                        if (pageNo > 1) {
                            $scope.displayPriviousLink = true;
                            $scope.previousPage = pageNo - 1;
                        } else {
                            $scope.displayPriviousLink = false;
                        }
                    }

                    $scope.details = arr;
                    $scope.product_loading = false;
                }
            }

            if (data.status == 'ERROR') {
                $scope.productMsg = data.msg;
            }

        });

    }


    if (!$rootScope.mycart) {
        $rootScope.mycart = {};
        $scope.cart_num_items = 0;
        $rootScope.order_tax = 0;
        $rootScope.product_discount = 0;
        $rootScope.product_tax = 0;
        $rootScope.order_discount = 0;
        $rootScope.order_tax_id = 1;
        $rootScope.order_tax_details = '';

        //$rootScope.allTaxMethods =
        getTax();
    }
    $scope.convertToInt= function (value) {
        var val = (eval(value) ==0)?1:eval(value);
        //alert(val)
        return val;
    };
    //Add to cart
    $scope.addCart = function (detail) {

        $scope.selected = '';

        if (!$rootScope.cartlength) {
            $rootScope.cartlength = 0;
        }

        $rootScope.cartlength++;
        var id = detail.id;
        if (!$rootScope.mycart[id]) {
            detail.qty = 1;
            detail.track_quantity = 1;
        } else {

            detail.qty = parseInt($rootScope.mycart[id].qty) + 1;
            detail.track_quantity = parseInt($rootScope.mycart[id].track_quantity)+1;
            detail.qty = detail.track_quantity;

        }
        $rootScope.mycart[id] = detail;
        $rootScope.cart = $rootScope.mycart;
        $rootScope.haveTax = false;
        // Remove cart product
        $scope.remove = function (id) {
            delete $rootScope.cart[id];
            delete $rootScope.mycart[id];
            cartTotal(cartSubTotal());
            //jQuery('.item-count span').html($rootScope.cartlength);
            //location = '#/cart';
        }

        function cartTotal(cart_subtotal) {
            var tax_name = '';
            var tax_id = '';

            if($rootScope.order_tax_details.id){
                ///console.log($rootScope.order_tax_details);
                $rootScope.order_tax = round_number(((parseFloat($scope.cart_subtotal)-parseFloat($rootScope.order_discount)) * parseFloat($rootScope.order_tax_details.rate)) / 100);
            }


            $scope.cart_total = round_number( (parseFloat($scope.cart_subtotal) - parseFloat($rootScope.order_discount)) + parseFloat($rootScope.order_tax));

           /* var log = ' cart_subtotal: '+parseFloat($scope.cart_subtotal);
            log += ' cart_total: '+parseFloat($scope.cart_total);
            log += ' order_discount: '+parseFloat($rootScope.order_discount);
            log += ' product_discount: '+parseFloat($rootScope.product_discount);
            log += ' order_tax: '+parseFloat($rootScope.order_tax);
            log += ' rate: '+parseFloat($rootScope.order_tax_details.rate);*/
            //console.log(log);

            $rootScope.checkout = {
                'cart_subtotal': $scope.cart_subtotal,
                'tax_id': tax_id,
                'tax_name': tax_name,
                'tax_amount': $rootScope.order_tax,
                'order_tax': $rootScope.order_tax,
                'product_tax': $rootScope.product_tax,
                'order_discount': $rootScope.order_discount,
                'cart_total': $scope.cart_total,
            }

            return;
        }


        function cartSubTotal() {
            $rootScope.cartObj = 0;
            $rootScope.product_tax = 0;
            $rootScope.product_discount = 0;
            var total = 0;
            var cartqty = 0;

            var keys = Object.keys($rootScope.cart);

            if (keys.length > 0) {

                angular.forEach($rootScope.cart, function (item,itemkey) {

                   //discount calculation
                    if(item.item_discount){
                        $rootScope.cart[itemkey].per_item_discount = round_number(parseFloat($rootScope.cart[itemkey].item_discount)*item.qty);
                    }else{
                        $rootScope.cart[itemkey].item_discount = 0;
                        $rootScope.cart[itemkey].per_item_discount =0;
                    }
                    var unit_price = round_number(parseFloat(item.price) - parseFloat($rootScope.cart[itemkey].item_discount));

                    //tax calculation
                    if(item.tax_rate != 0){
                        var tax_details = '';
                        angular.forEach($rootScope.allTaxMethods.tax_methods, function (taxMethods,taxkey) {
                           if(taxMethods.id == item.tax_rate){
                               $rootScope.cart[itemkey].tax_details = taxMethods;
                               tax_details = taxMethods;
                           }
                        });

                        if(tax_details.id){
                            var pr_tax = 0;
                            var pr_item_tax = 0;
                            var item_tax = 0;
                            var tax = "";
                            if (tax_details.type == 1 && tax_details.rate != 0) {
                                if(item.tax_method == 1){
                                    item_tax = round_number((parseFloat(unit_price) * parseFloat(tax_details.rate)) / 100);
                                    tax = tax_details.rate + "%";
                                    unit_price = round_number(parseFloat(unit_price) + item_tax);
                                }else{

                                    item_tax = round_number((parseFloat(unit_price) * parseFloat(tax_details.rate)) / (100 + parseFloat(tax_details.rate)));
                                    tax = tax_details.rate + "%";
                                    //item.item_net_price = item.price - item_tax;
                                }
                            }else if(tax_details.type == 2){
                                if (item.tax_method == 1) {
                                    item_tax = round_number((parseFloat(unit_price) * parseFloat(tax_details.rate)) / 100);
                                    tax = tax_details.rate + "%";
                                    unit_price = round_number(parseFloat(unit_price) + item_tax);
                                } else {
                                    item_tax = round_number((parseFloat(unit_price) * parseFloat(tax_details.rate)) / (100 + parseFloat(tax_details.rate)));
                                    tax = tax_details.rate + "%";
                                    //item.item_net_price= parseFloat(item.price) - item_tax;
                                }
                                item_tax =tax_details.rate;
                                tax = tax_details.rate;
                            }
                            item.pr_item_tax = round_number(item_tax * item.qty);
                        }
                    }



                    $rootScope.cart[itemkey].pr_item_tax = (item.pr_item_tax)?item.pr_item_tax:0;
                    $rootScope.cart[itemkey].item_net_price = unit_price;
                    //$rootScope.cart[itemkey].price = $rootScope.cart[itemkey].item_net_price;
                    $rootScope.product_tax += $rootScope.cart[itemkey].pr_item_tax;
                    $rootScope.product_discount += parseFloat($rootScope.cart[itemkey].per_item_discount);
                    total +=  round_number(parseFloat($rootScope.cart[itemkey].item_net_price) * item.qty) ;
                    cartqty += item.qty;


                    //console.log("----Tax Methods ----")
                    //console.log($rootScope.allTaxMethods) ;
                    //console.log($rootScope.cart[itemkey]    ) ;

                });

                $scope.cart_subtotal = total;
                $rootScope.cartlength = cartqty;
                $scope.cart_num_items = cartqty;
            } else {
                $scope.cart_subtotal = 0;
                $rootScope.cartlength = 0;
                $scope.cart_num_items =0;
                $scope.cart_total = 0;
                $scope.tax_amount = 0;
                $rootScope.order_discount = 0;
                $rootScope.product_tax = 0;
                $rootScope.order_tax = 0;
            }
            return total;
        }

        $scope.updateQty = function (qty) {
            var cart_subtotal = cartSubTotal();
            cartTotal(cart_subtotal);

        }

        $rootScope.active;
        $rootScope.my_account = "active2";
        $rootScope.home = "active2";
        $rootScope.contact = "active2";
        $rootScope.cart_menu = "active";

        $scope.qty1 = [];
        $scope.quantity = function (key, qty) {

            $scope.qty1[key] = qty;
            $scope.cart[key].track_quantity = qty;
            $scope.cart[key].qty = qty;

        }

        /*$rootScope.order_discount = function () {
            cartSubTotal();
        }
        $rootScope.order_tax = function () {
            cartSubTotal()
        }*/

        $scope.total = [];
        $scope.price = function (key, price1) {
            $scope.total[key] = price1;
        }

        $scope.getTotal = function (array) {
            var total = 0;
            if (array) {
                angular.forEach(array, function (item) {
                    //alert(item);
                    total += item;
                });
            }
            $scope.total1 = total;
        }
    }

    $scope.filterBySubCat = function (pId) {

    }

    //Search filter
    $scope.filters = {};

    //category reset
    $scope.resetFilter = function () {
        // set filter object back to blank
        $scope.filters = {};
    }

    $scope.openCheckoutPopup = function () {
        //var titlename=  "Payment";
            var modalInstance = $uibModal.open({
                templateUrl: 'templates/checkout.php',
                controller: 'checkoutController',
                openedClass:"rk-model",
                backdropClass:"",
                resolve: {
                    myParms: function () {
                        return $rootScope.checkout;
                    }
                }
            });
        modalInstance.result.then(function (selectedItem) {
            console.log(selectedItem);

        }, function () {
            console.log('Modal dismissed at: ' + new Date());
            //cartSubTotal();
        });
    }

    $scope.openOrderPopup = function () {
        //var titlename=  "Order";
        var modalInstance = $uibModal.open({
            templateUrl: 'templates/orderPopUp.php',
            controller: 'PopupCont',
            openedClass:"rk-model",
            backdropClass:"",
            resolve: {
                myParms: function () {
                    return {pop_up_title:'Order'};
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            console.log(selectedItem);
            console.log("onclose return with vals");
        }, function () {
            console.log('Modal dismissed at: ' + new Date());
            //cartSubTotal();
        });
    }

    $scope.openProductPopup = function (tax_rate,product_id) {
        var titlename=  "Product";
        var modalInstance = $uibModal.open({
            templateUrl: 'templates/productPopUp.php',
            controller: 'PopupCont',
            openedClass:"rk-model",
            backdropClass:"",
            resolve: {
                myParms: function () {
                    return {pop_up_title:'Product',tax_rate:tax_rate,product_id:product_id};
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            console.log(selectedItem);

        }, function () {
            console.log('Modal dismissed at: ' + new Date());
            //cartSubTotal();
        });

    }


    //menu active
    $rootScope.active;
    $rootScope.my_account = "active2";
    $rootScope.home = "active";
    $rootScope.contact = "active2";
    $rootScope.cart_menu = "active2";

});


app.controller('PopupCont',function ($scope,$rootScope, $uibModalInstance, myParms) {

    console.log(myParms);
    switch(myParms.pop_up_title){
        case 'Order':
            $scope.discount = $rootScope.order_discount;
            $scope.tax_id = $rootScope.order_tax_id;
            break;
        case 'Product':
            $scope.tax_id = myParms.tax_rate;
            angular.forEach($rootScope.cart, function (item,itemkey) {
                if($rootScope.cart[itemkey].id == myParms.product_id){
                    if($rootScope.cart[itemkey].item_discount){
                        $scope.discount = $rootScope.cart[itemkey].item_discount;
                    }else{
                        $rootScope.cart[itemkey].item_discount = 0;
                        $scope.discount = $rootScope.cart[itemkey].item_discount;
                    }
                }
            });
            break;
    }

    $scope.close = function () {
        $uibModalInstance.dismiss('cancel');
    };

    $scope.save = function () {
        $rootScope.order_tax_id = $scope.tax_id;

        $rootScope.order_discount = $scope.discount;
        angular.forEach($rootScope.allTaxMethods.tax_methods, function (taxMethods,taxkey) {
            if(taxMethods.id == $rootScope.order_tax_id){
                $rootScope.order_tax_details  = taxMethods;
            }
        });

        $uibModalInstance.close($rootScope.order_tax_details );
    };

    $scope.saveCartTax = function () {
        //console.log("----saveCartTax----");
        angular.forEach($rootScope.cart, function (item,itemkey) {
            if($rootScope.cart[itemkey].id == myParms.product_id){
                //console.log($rootScope.cart[itemkey].item_discount);
                $rootScope.cart[itemkey].item_discount = $scope.discount;
                $rootScope.cart[itemkey].tax_rate = $scope.tax_id;
            }
        });
        $uibModalInstance.close($rootScope.cart);
    };
});


app.filter('totalSumPriceQty', function () {
    return function (data, key1, key2) {

        if (angular.isUndefined(data) || angular.isUndefined(key1) || angular.isUndefined(key2))
            return 0;

        var sum = 0;

        angular.forEach(data, function (v, k) {
            sum = sum + (parseFloat(v[key1]) * parseFloat(v[key2]));
        });

        return sum;
    }
});

app.controller('checkoutController', function ($rootScope, $scope, $http, $location,$route,$uibModalInstance,$filter,dbService) {
    if (!$rootScope.user) {
        location = '#/';
        return;
    }
    $scope.amount_paid = $scope.checkout.cart_total;
    //$rootScope.submit_type ='';
    console.log($rootScope.checkout);
    $scope.closeCheckoutPopup = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.submitForm = function (submit_type) {
        $rootScope.submit_type = submit_type;
        $('#proceed_to_pay').trigger('click');
    };
    $scope.paymentType = {
        code: ''
    };

   var AuthToken = getAuthToken($rootScope.user);
   //isValidToken($rootScope.user_id, AuthToken);

    //Shipping Information
   /* $http({
        method: 'POST',
        url: $rootScope.local_api_url + '/eshop?action=getShippingMethod',
        data: 'user_id=' + $rootScope.user_id, //forms user object
        headers: {'Content-Type': 'application/x-www-form-urlencoded'}
    })
        .success(function (Response) {
            if (Response.status == 'SUCCESS') {
                $scope.shipping = Response.result;
            }//end else
        });
*/
    $scope.payment_method_loading = false;
    //Payment Information
    $http({
        method: 'POST',
        url: $rootScope.local_api_url + '/eshop?action=getPaymentMethod',
        data: 'user_id=' + $rootScope.user_id, //forms user object
        headers: {'Content-Type': 'application/x-www-form-urlencoded'}
    }).success(function (Response) {
            if (Response.status == 'SUCCESS') {
                $scope.payment = Response.result;
                $scope.payment_method_loading = true;
            }//end else
        });

    $scope.checkout_proceed = function () {
//alert($("#amount_paid").val());
        $scope.loading = true;
//console.log($scope.shipping);
        //var shippingType = document.querySelector('input[name = "shippingType"]:checked').value;
        var shippingType = 2;
        var payment_id = 0;

            angular.forEach($scope.payment, function (item,itemkey) {
                if($scope.paymentType.code == item.code){
                     payment_id = item.id;
                    //return item;
                }
            });



        //var shippingMethod = $scope.shipping[shippingType];
        var paymentMethod = $scope.paymentType.code;
        $scope.amount_paid = parseFloat($("#amount_paid").val());
        $scope.amount_paid = ($scope.amount_paid < $scope.checkout.cart_total  )?$scope.amount_paid:$scope.checkout.cart_total;

        $scope.products = {};
        if ($rootScope.cart) {
            angular.forEach($rootScope.cart, function (item) {

                $scope.products[item.id] = {
                    "product_id": item.id,
                    "product_code": item.code,
                    "product_name": item.name,
                    "price": item.price,
                    "net_unit_price": item.item_net_price,
                    "quantity": item.qty,
                    "subtotal": item.item_net_price * item.qty,
                    "product_unit_id": item.unit_id,
                    "product_unit_code": item.unit_code,
                    "unit_quantity": item.qty,
                    "tax_details": item.tax_details,
                    "pr_item_tax": item.pr_item_tax,
                    "per_item_discount": item.per_item_discount,
                }
            });
        }

        $scope.orderItems = {
            "total_item": $rootScope.cartlength,
            "order_tax_id": $rootScope.order_tax_id,
            "order_tax": $rootScope.order_tax,
            "product_tax": $rootScope.product_tax,
            "product_discount": $rootScope.product_discount,
            "order_discount": $rootScope.order_discount,
            "item_subtotal": parseFloat($scope.checkout.cart_total)+parseFloat($rootScope.order_discount),
            "cart_total": $scope.checkout.cart_total,
            "amount_paid": $scope.amount_paid,
            "products": $scope.products,
            "payment_method": $scope.paymentType.code,
            "transection_type": $scope.paymentType.code,
            "payment_id": payment_id,
            "transection_id": $scope.transection_id
        };

        var postData = 'user_id=' + $rootScope.user_id
            + '&merchant=' + $rootScope.merchant
            + '&user=' + $rootScope.user
            + '&auth_token=' + AuthToken;

        if ($scope.checkout.save_info) {
            postData = postData + '&save_info=1';
        }else{
            postData = postData + '&save_info=0';
        }

        postData = postData + '&cart=' + JSON.stringify($scope.orderItems);
        $scope.errorShow = false;

        $http({
            method: 'POST',
            url: $rootScope.local_api_url + '/eshop?action=checkout_offline',
            data: postData, //forms user object
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        })
            .error(function (error) {

                $scope.error_msg = error;
                $scope.loading = false;
            })
            .success(function (Response) {


                if (Response.status == 'SUCCESS') {
                    $scope.loading = false;
                    //location = Response.redirect_url;

                    $scope.closeCheckoutPopup();

                    /*$rootScope.order_tax_id = 1;
                    $rootScope.order_tax = 0;
                    $rootScope.product_tax = 0;
                    $rootScope.order_discount = 0;
                    $rootScope.product_discount = 0;
                    $rootScope.order_tax_details = {};
                    $rootScope.cart = null;*/
                    dbService.clearCart();
                    switch($rootScope.submit_type){
                        case "Submit & print":
                            location = '/#/view/'+Response.order_id;
                            break;
                        case "Quick submit":
                            alert("Order Successfuly Saved.");
                            $route.reload();
                            //location = '/#/view/'+Response.order_id;
                            break;
                        case "submit":
                            ///alert("Order Successfuly Saved.");
                            location = '/#/view/'+Response.order_id;
                            break;
                    }

                    return true;
                }//end else

                if (Response.status == 'ERROR') {
                    $scope.errorShow = true;
                    $scope.loading = false;

                    if (Response.msg_arr) {

                        $scope.error_msg = '';
                        angular.forEach(Response.msg_arr, function (value, key) {
                            $scope.error_msg += value + '<br/>';
                        });

                    } else {
                        $scope.error_msg = Response.msg;
                    }
                }
            });


    }

    $rootScope.active;
    $rootScope.my_account = "active2";
    $rootScope.home = "active2";
    $rootScope.contact = "active2";
    $rootScope.cart_menu = "active2";
});

app.controller('buttonController', function ($rootScope) {
    $rootScope.header = true;
});

app.controller('settingsController', function ($rootScope) {
   console.log("settingsController");
});

app.controller("generalController", function ($rootScope, $scope, $location, $http) {
    loc = $location.absUrl().split($rootScope.shopurl);
    //$rootScope.is_login = true;
    if(localStorage.getItem("merchant")){
        $rootScope.merchant = JSON.parse(localStorage.getItem("merchant"));
        $rootScope.user_name = $rootScope.merchant.res.name;
        pos_url =  $rootScope.merchant.res.pos_url;
        getInfo();
    }

    //loc = [];
    //loc['0'] = 'http://pos.simplypos.in';
    $rootScope.loc = loc['0'];
    // To get employee details

	
    function getInfo() {
        $http({
            method: 'POST',
            url: "api.php?action=generalDetails",
            data: 'apikey=32468723PWERWE234324SADA&url='+pos_url, //forms user object
            dataType: "json",
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        }).success(function (data) {
            //console.log(data);
            // Stored the returned data into scope
            $rootScope.general = JSON.stringify(data);
            console.log($rootScope.general);
            localStorage.setItem("generalDetails",$rootScope.general);
        }).error(function (error) {
            //console.log(data);
        });


    }
});



app.controller("loginController", function ($rootScope, $location, $scope, $http,dbService) {

    $rootScope.middle_section = "login-margin";
    $rootScope.is_login = true;

    delete $scope.info;
    var se = getSession();

    if ($rootScope.user) {
        $rootScope.is_login = true;
        location = '#/pos';
        return;
    } else {
        $rootScope.is_login = false;
		
    }
    url = $location.absUrl();
    var paramValue = $location.search().pass;
    if (paramValue) {
        //loginKey(paramValue);
    }
    else {
        $scope.pass = 'No';
    }

    loc = $location.absUrl().split($rootScope.shopurl);

    $rootScope.loc = loc['0'];

    $rootScope.header = false;
    $scope.error = '';

    function loginKey(key) {

        $http({
            method: 'POST',
            url: $rootScope.local_api_url + '/api/user?action=auth',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            transformRequest: function (obj) {
                var str = [];
                for (var p in obj)
                    str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                return str.join("&");
            },
            data: {passkey: key}
        })
            .success(function (response) {
                console.log(response);

                if (response.result) {
                    $scope.success = 'You are successfully login.';
                    delete $scope.error;
                    $rootScope.user = JSON.stringify(response);
                    setSession(JSON.stringify(response));
                    localStorage.setItem("rootScopeUser",$rootScope.user);

                    location = '#/pos';
                }
                else {
                    $scope.error = 'Passkey is invalid.';
                    delete $scope.success;
                    delete $scope.info.username;
                    delete $scope.info.password;
                }
            });
    }




    function getSession() {
        if(localStorage.getItem("merchant")) {
            if(localStorage.getItem("rootScopeUser")) {
                return localStorage.getItem("rootScopeUser");
            }else{
                $http.get('api.php?action=getSession').success(function (data) {

                    if (data.user) {
                        var usr = JSON.parse(data.user);
                        $rootScope.user = JSON.stringify(usr);
                        $rootScope.user_id = usr.result[0].id;
                        setSession(JSON.stringify(usr));
                        localStorage.setItem("rootScopeUser", $rootScope.user);
                        location = '#/pos';
                    }
                });
            }
        }
    }

    $scope.login = function (info) {
        $scope.error = '';

        if (angular.isUndefined(info)) {
            $scope.error = 'Username and Password fields are blank.';
            return;
        }
        if (angular.isUndefined(info.username) || info.username == '') {
            $scope.error = 'Username field is blank.';
            return;
        }
        /*if (angular.isUndefined(info.password) || info.password == '') {
            $scope.error = 'Password field is blank.';
            return;
        } *///https://pos.simplypos.in/api/user?action=auth 7387364190 htL2Zy

        $http({
            method: 'POST',
            url: 'https://www.simplypos.in/api/merchantDetail.php',
            data: 'apikey=32468723PWERWE234324SADA&phone='+info.username, //forms user object
            dataType: "json",
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        }).success(function (Response){
            if(Response.status == 'error'){
                $scope.error = Response.msg;
                return;
            }else{
                //console.log(Response);
                localStorage.setItem("merchant",JSON.stringify(Response));
                merchant = (localStorage.getItem("merchant"))?JSON.parse(localStorage.getItem("merchant")):null;
            $http({
                method: 'POST',
                url: $rootScope.local_api_url + '/api/user?action=auth',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                transformRequest: function (obj) {
                    var str = [];
                    for (var p in obj)
                        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                    return str.join("&");
                },
                data: {login_id: '9881815256', password: 'password'}
            }).success(function (response) {
                if (response.result) {
                    $scope.success = 'You are successfully login.';
                    delete $scope.error;
                    $rootScope.user = JSON.stringify(response);
                    $rootScope.user_id = response.result[0].id;
					$rootScope.user_name = Response.res.name;
					response.merchant = Response;
                    setSession(JSON.stringify(response));
                    localStorage.setItem("rootScopeUser",$rootScope.user);
                    /*sync('products',
                        merchant.res.pos_url+'api/catlog?action=getAllProducts',
                        local_api_url+'/api/syncToRecords');*/
                    if(merchant.res.pos_url){
                       // dbService.syncAllTables();
                        dbService.sync('categories',
                            merchant.res.pos_url+'api/catlog?action=getAllCategories',
                            local_api_url+'/api/syncToRecords');
                        dbService.sync('products',
                            merchant.res.pos_url+'api/catlog?action=getAllProducts',
                            local_api_url+'/api/syncToRecords');
                        dbService.sync('tax_rates',
                            merchant.res.pos_url+'/eshop/?action=getTaxMethods',
                            local_api_url+'/api/sync_records');
                        dbService.syncGeneralDetails(merchant.res.pos_url).then(function(){
                            location = '#/pos';
                            });
                    }


                }else {
                    $scope.error = 'Please check email address/phone number and password.';
                    delete $scope.success;
                    delete $scope.info.username;
                    delete $scope.info.password;


                }
            });
            }

        });

        delete info;
    }

});

app.controller('logoutController', function ($rootScope, $scope, $http, $location) {
    delete $rootScope.user;
    delete $rootScope.cartlength;
    delete $rootScope.cart;
    delete $rootScope.mycart;
    delete $rootScope.checkout;
    localStorage.clear();
    deleteAllCookies();
    exitSession();
    function exitSession() {
        $http.get( 'api.php?action=exitSession').success(function (data) {
            return data;
        });
    }
    location = '#/';
});

var productNameList = function (productNames, key) {
    element.all(by.repeater(key + ' in details').column(key + '.name')).then(function (arr) {
        arr.forEach(function (wd, i) {
            expect(wd.getText()).toMatch(productNames[i]);
        });
    });
};

app.service('dbService', function($http,$rootScope) {
    return {
        getData: function($http) {

            return $http.get('db.php/score/getData').success(function(data) {
                return data;
            });

        },
        getTestData: function($http) {
            //$http.get('db.php/score/getData').success(function(data) {
            var data = [];
            data.push("DDddfdf");
            return data;
        },
        syncAllTables:function(){
            sync('categories',
                merchant.res.pos_url+'api/catlog?action=getAllCategories',
                local_api_url+'/api/syncToRecords');
            sync('products',
                merchant.res.pos_url+'api/catlog?action=getAllProducts',
                local_api_url+'/api/syncToRecords');
            sync('tax_rates',
                merchant.res.pos_url+'/eshop/?action=getTaxMethods',
                local_api_url+'/api/sync_records');
        },
        sync:function(table,from_url,to_url,auto_inc_filed){
            //var data0 = {table: table, from_url : from_url,to_url: to_url};
            var data_string = "table="+table;
            data_string += "&from_url="+from_url;
            data_string += "&to_url="+to_url;
            return $http({
                method: 'POST',
                url: local_api_url+'/api/sync_records',
                data: data_string, //forms user object
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            })
                .error(function (error) {
                    alert('Error Past methos in getOrderTaxMethod.');
                    return(error);
                })
                .success(function (data) {
                    return  data;
                });
        },
        syncGeneralDetails:function(pos_url){
            return $http({
                method: 'POST',
                url: "api.php?action=generalDetails",
                data: 'apikey=32468723PWERWE234324SADA&url='+pos_url, //forms user object
                dataType: "json",
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            }).success(function (data) {
                //console.log(data);
                // Stored the returned data into scope
                $rootScope.general = JSON.stringify(data);
               // console.log($rootScope.general);
                localStorage.setItem("generalDetails",$rootScope.general);
                return $rootScope.general;
            }).error(function (error) {
                return error;
                //console.log(data);
            });
        },
        syncProductImages:function(pos_url){
           // var data0 = {pos_url: pos_url};
            return $http({
                method: 'POST',
                url: 'api.php?action=syncProductImages',
                data: "pos_url="+pos_url, //forms user object
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            })
                .error(function (error) {
                    alert('Error Past methos in getOrderTaxMethod.');
                    return(error);
                })
                .success(function (data) {
                    return  data;
                });
        },
        clearCart:function(){

            delete $rootScope.cartlength;
            delete $rootScope.cart;
            delete $rootScope.cart_total;
            delete $rootScope.mycart;
            delete $rootScope.checkout;
            delete $rootScope.order_tax_id;
            delete $rootScope.order_tax;
            delete $rootScope.product_tax;
            delete $rootScope.order_discount;
            delete $rootScope.product_discount;
            delete $rootScope.order_tax_details;

        }
    };
});


app.directive('loading',   ['$http' ,function ($http)
{
    return {
        restrict: 'A',
        link: function (scope, elm, attrs)
        {
            scope.isLoading = function () {
                return $http.pendingRequests.length > 0;
            };

            scope.$watch(scope.isLoading, function (v)
            {
                if(v){
                    elm.show();
                }else{
                    elm.hide();
                }
            });
        }
    };

}]);

